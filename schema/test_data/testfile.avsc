{
  "type": "record",
  "name": "User",
  "namespace": "com.example.avro",
  "doc": "This is a user record in a fictitious to-do-list management app.",
  "fields": [
    {
      "name": "id",
      "doc": "System-assigned numeric user ID. Cannot be changed by the user.",
      "type": "int",
      "default" : 10
    },
    {
      "name": "username",
      "doc": "The username chosen by the user. Can be changed by the user.",
      "default" : "john",
      "type": "string"
    },
    {
      "name": "type_json",
      "doc": "The username chosen by the user. Can be changed by the user.",
      "default" : "john",
      "type": {
       "type": "string",
       "sqlType": "JSON"
     }
    },
    {
      "name": "name",
      "doc": "The username chosen by the user. Can be changed by the user.",
      "type": ["null",{
      "name" : "namerecord",
      "type" : "record",
      "fields" : [
        { "name" : "first" , "type" : "string" },
        { "name" : "last" , "type" : ["null","string"] }
        ]
     }]
    },
    {
      "name": "passwordHash",
      "doc": "The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).",
      "type" : "record",
      "namespace" : "Tutorialspoint",
      "fields" : [
        { "name" : "hint" , "type" : "string" },
        { "name" : "number" , "type" : "int" },
        { "name" : "age" , "type" : ["null","int"] }
        ]
    },
    {
      "name": "decimalCode",
      "doc": "The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).",
      "type": {
       "type": "bytes",
       "logicalType": "decimal",
       "precision": 4,
       "scale": 2
     }},
     {
      "name": "pets",
      "doc": "The user's pets.",
      "type": {
       "type": "array",
       "items": "string",
       "name": "pet"
     }},
    {
      "name": "decCode",
      "doc": "The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).",
      "type": ["null",{
       "type": "bytes",
       "logicalType": "decimal",
       "precision": 4,
       "scale": 2
     }]},
    {
      "name": "signupTimestamp",
      "doc": "Timestamp (milliseconds since epoch) when the user signed up",
      "type": {
       "type": "long",
       "logicalType": "local-timestamp-millis"
     }},
     {
      "name": "currentTimestamp",
      "doc": "Timestamp (milliseconds since epoch) when the user signed up",
      "type": {
       "type": "long",
       "logicalType": "local-timestamp-micros"
     }},
    {
      "name": "emailAddresses",
      "doc": "All email addresses on the user's account",
      "type": {
        "type": "array",
        "items": {
          "type": "record",
          "name": "EmailAddress",
          "doc": "Stores details about an email address that a user has associated with their account.",
          "fields": [
            {
              "name": "address",
              "doc": "The email address, e.g. `foo@example.com`",
              "type": "string"
            },
            {
              "name": "verified",
              "doc": "true if the user has clicked the link in a confirmation email to this address.",
              "type": "boolean",
              "default": false
            },
            {
              "name": "dateAdded",
              "doc": "Timestamp (milliseconds since epoch) when the email address was added to the account.",
              "type": ["null",{
                "type" : "long",
                "logicalType" : "timestamp-millis"
              }]
            },
            {
              "name": "datetimeAdded",
              "doc": "Timestamp (milliseconds since epoch) when the email address was added to the account.",
              "type": ["null", {
                "type" : "long",
                "logicalType" : "time-micros"
              }]
            },
            {
              "name": "dateBounced",
              "doc": "Timestamp (milliseconds since epoch) when an email sent to this address last bounced. Reset to null when the address no longer bounces.",
              "type": ["null", {
                "type" : "long",
                "logicalType" : "timestamp-micros"
              }]
            }
          ]
        }
      }
    },
    {
      "name": "twitterAccounts",
      "doc": "All Twitter accounts that the user has OAuthed",
      "type": {
        "type": "array",
        "items": {
          "type": "record",
          "name": "TwitterAccount",
          "doc": "Stores access credentials for one Twitter account, as granted to us by the user by OAuth.",
          "fields": [
            {
              "name": "status",
              "doc": "Indicator of whether this authorization is currently active, or has been revoked",
              "type": {
                "type": "enum",
                "name": "OAuthStatus",
                "doc": "the token should work based on user input to authorization",
                "symbols": ["PENDING", "ACTIVE", "DENIED", "EXPIRED", "REVOKED"]
              }
            },
            {
              "name": "userId",
              "doc": "Twitter's numeric ID for this user",
              "type": "long"
            },
            {
              "name": "screenName",
              "doc": "The twitter username for this account (can be changed by the user)",
              "type": "string"
            },
            {
              "name": "acconutBalance",
              "doc": "Twitter's acconutBalance for this user",
              "type": {
                "type" : "bytes",
                "logicalType" : "decimal",
                "precision" : 40,
                "scale" : 10
            }},
            {
              "name": "oauthToken",
              "doc": "The OAuth token for this Twitter account",
              "type": "string"
            },
            {
              "name": "oauthTokenSecret",
              "doc": "The OAuth secret, used for signing requests on behalf of this Twitter account.",
              "type": ["null", "string"]
            },
            {
              "name": "dateAuthorized",
              "doc": "Timestamp (milliseconds since epoch) when the user last authorized this Twitter account",
              "type": "long"
            }
          ]
        }
      }
    },
    {
      "name": "toDoItems",
      "doc": "The top-level items in the user's to-do list",
      "type": {
        "type": "array",
        "items": {
          "type": "record",
          "name": "ToDoItem",
          "doc": "A record is one node in a To-Do item tree (every record can contain nested sub-records).",
          "fields": [
            {
              "name": "status",
              "doc": "User-selected state for this item (e.g. whether or not it is marked as done)",
              "type": {
                "type": "enum",
                "name": "ToDoStatus",
                "symbols": ["HIDDEN", "ACTIONABLE", "DONE", "ARCHIVED", "DELETED"]
              }
            },
            {
              "name": "title",
              "doc": "One-line summary of the item",
              "type": "string"
            },
            {
              "name": "description",
              "doc": "Detailed description (may contain HTML markup)",
              "type": ["null", "string"]
            },
            {
              "name": "snoozeDate",
              "doc": "Timestamp (milliseconds since epoch) at which the item should go from HIDDEN to ACTIONABLE status",
              "type": ["null", {
                "type" : "int",
                "logicalType" : "date"
              }]
            },
            {
              "name": "snoozeTime",
              "doc": "Timestamp (milliseconds since epoch) at which the item should go from HIDDEN to ACTIONABLE status",
              "type": ["null", {
                "type" : "int",
                "logicalType" : "time-millis"
              }]
            }
          ]
        }
      }
    }
  ]
}